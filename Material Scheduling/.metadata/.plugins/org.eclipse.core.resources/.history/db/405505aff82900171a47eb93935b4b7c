package odessaInterface;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import grades.TagMaterialList;
import grades.TagOption;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JButton;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.lang.reflect.Array;
import java.util.Iterator;


public class ProdCost extends JFrame {

	private JPanel contentPane;
	private JTextField power;
	private JTextField oxygen;
	private JTextField time;
	private JTextField rgo;
	private JTextField tch;
	private JTextField crno;
	private JTextField chrome;
	private JTextField crni;
	private JTextField carbon;
	


	private double mixPower;
	private double mixOxygen;
	private double mixTapWgt;
	private double mixTime;
	private double mixRgo;
	private double mixTch;
	private double mixCrno;
	private double mixChrome;
	private double mixCrni;
	private double mixCarbon;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		System.out.println("Initializing Production Costs Menu...");
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ProdCost frame = new ProdCost();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public ProdCost() {
		setTitle("ProdCost");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 308, 367);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JLabel lblNewLabel = new JLabel("Cost");
		lblNewLabel.setBounds(10, 11, 46, 14);
		contentPane.add(lblNewLabel);
		
		JLabel lblKwhOfElectricity = new JLabel("KWH of Electricity");
		lblKwhOfElectricity.setBounds(34, 36, 133, 14);
		contentPane.add(lblKwhOfElectricity);
		
		JLabel lblNewLabel_1 = new JLabel("Cubic Feet of Oxygen");
		lblNewLabel_1.setBounds(34, 61, 133, 14);
		contentPane.add(lblNewLabel_1);
		
		JLabel lblMinuteOfFurnace = new JLabel("Minute of Furnace Time");
		lblMinuteOfFurnace.setBounds(34, 86, 133, 14);
		contentPane.add(lblMinuteOfFurnace);
		
		power = new JTextField();
		//power.setText("0.04008");
		power.setBounds(177, 33, 86, 20);
		contentPane.add(power);
		power.setColumns(10);
		
		oxygen = new JTextField();
		//oxygen.setText("0.0155");
		oxygen.setBounds(177, 58, 86, 20);
		contentPane.add(oxygen);
		oxygen.setColumns(10);
		
		time = new JTextField();
		//time.setText("51.01");
		time.setBounds(177, 83, 86, 20);
		contentPane.add(time);
		time.setColumns(10);
		
		rgo = new JTextField();
		rgo.setBounds(122, 133, 86, 20);
		contentPane.add(rgo);
		rgo.setColumns(10);
		
		tch = new JTextField();
		tch.setBounds(122, 158, 86, 20);
		contentPane.add(tch);
		tch.setColumns(10);
		
		crno = new JTextField();
		crno.setBounds(122, 183, 86, 20);
		contentPane.add(crno);
		crno.setColumns(10);
		
		chrome = new JTextField();
		chrome.setBounds(122, 208, 86, 20);
		contentPane.add(chrome);
		chrome.setColumns(10);
		
		crni = new JTextField();
		crni.setBounds(122, 233, 86, 20);
		contentPane.add(crni);
		crni.setColumns(10);
		
		carbon = new JTextField();
		carbon.setBounds(122, 258, 86, 20);
		contentPane.add(carbon);
		carbon.setColumns(10);
		
		/*
		try {
			File file = new File("files/testcosts.txt");
			FileReader fileReader = new FileReader(file);
			BufferedReader bufferedReader = new BufferedReader(fileReader);
			StringBuffer stringBuffer = new StringBuffer();
			
			String line;
			line = bufferedReader.readLine();
			stringBuffer.append(line);
			mixPower = Double.parseDouble(line);
			power.setText(line);
			stringBuffer.append("\n");
			line = bufferedReader.readLine();
			stringBuffer.append(line);
			mixOxygen = Double.parseDouble(line);
			oxygen.setText(line);
			stringBuffer.append("\n");
			line = bufferedReader.readLine();
			stringBuffer.append(line);
			mixTime = Double.parseDouble(line);
			time.setText(line);
			stringBuffer.append("\n");
			fileReader.close();
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		*/
		
			
		try {		
			
    		FileInputStream inputStream = new FileInputStream(new File("files/prodCost.xlsx"));
    		Workbook workbook = new XSSFWorkbook(inputStream);
    		Sheet sheet = (Sheet) workbook.getSheetAt(0);
    		Iterator iterator = sheet.iterator();
    		
    		while (iterator.hasNext()) {   			
    			
    			Row nextRow = (Row) iterator.next();
    			//Ignore first row with headings
    			if(nextRow.getRowNum()==0)
    			    continue;
    			
    			Iterator cellIterator2 = nextRow.cellIterator();
    			Cell cellVal = (Cell) cellIterator2.next();
    			//System.out.println(cellVal.getNumericCellValue());
    			Iterator cellIterator = nextRow.cellIterator();			
    			
    				
	    			while (cellIterator.hasNext()) {
	    					    				   				
	    			    Cell cell = (Cell) cellIterator.next();	    			    
	    			    int columnIndex=cell.getColumnIndex();  
	    			    
	    			    switch (columnIndex+1) {    			    			    
		    			    case 1:
		    			    	mixPower = cell.getNumericCellValue();
		    			    	power.setText(String.valueOf(mixPower));
		    			    	break;
		    			    case 2:
		    			    	mixOxygen = cell.getNumericCellValue();
		    			    	oxygen.setText(String.valueOf(mixOxygen));
		    			    	break;
		    			    case 3:
		    			    	mixTime = cell.getNumericCellValue();
		    			    	time.setText(String.valueOf(mixTime));
		    			    	break;
		    			    case 4:
		    			    	mixRgo = cell.getNumericCellValue();
		    			    	rgo.setText(String.valueOf(mixRgo));
		    			    	break;
		    			    case 5:
		    			    	mixTch = cell.getNumericCellValue();
		    			    	tch.setText(String.valueOf(mixTch));
		    			    	break;
		    			    case 6:
		    			    	mixCrno = cell.getNumericCellValue();
		    			    	crno.setText(String.valueOf(mixCrno));
		    			    	break;
		    			    case 7:
		    			    	mixChrome = cell.getNumericCellValue();
		    			    	chrome.setText(String.valueOf(mixChrome));
		    			    	break;
		    			    case 8:
		    			    	mixCrni = cell.getNumericCellValue();
		    			    	crni.setText(String.valueOf(mixCrni));
		    			    	break;
		    			    case 9:
		    			    	mixCarbon = cell.getNumericCellValue();
		    			    	carbon.setText(String.valueOf(mixCarbon));
		    			    	break;
		    			}
	    			}
    			}    			      
    		}catch (IOException e) {
    				e.printStackTrace();
    		}
    				    			
    			
		
		
		
		
		
		
		
		JLabel lblCostPer = new JLabel("Cost / 1% Yield for Grades");
		lblCostPer.setBounds(10, 111, 159, 14);
		contentPane.add(lblCostPer);
		
		JLabel lblNewLabel_2 = new JLabel("RGO");
		lblNewLabel_2.setBounds(34, 136, 78, 14);
		contentPane.add(lblNewLabel_2);
		
		JLabel lblThc = new JLabel("TCH");
		lblThc.setBounds(34, 161, 78, 14);
		contentPane.add(lblThc);
		
		JLabel lblCrno = new JLabel("CRNO");
		lblCrno.setBounds(34, 186, 78, 14);
		contentPane.add(lblCrno);
		
		JLabel lblChrome = new JLabel("CHROME");
		lblChrome.setBounds(34, 211, 78, 14);
		contentPane.add(lblChrome);
		
		JLabel lblCrni = new JLabel("CRNI");
		lblCrni.setBounds(34, 236, 78, 14);
		contentPane.add(lblCrni);
		
		JLabel lblCarbon = new JLabel("CARBON");
		lblCarbon.setBounds(34, 261, 78, 14);
		contentPane.add(lblCarbon);
		
		JButton btnUpdate = new JButton("Update");
		btnUpdate.setBounds(10, 295, 89, 23);
		contentPane.add(btnUpdate);
        btnUpdate.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                update();
            }
        });
		
		JButton btnReset = new JButton("Reset");
		btnReset.setBounds(149, 295, 89, 23);
		contentPane.add(btnReset);
        btnReset.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                reset();
            }
        });
		
		
	}
	private boolean update() {
		System.out.println("Update");
		boolean checkPower = power.getText().matches("-?\\d+(\\.\\d+)?");
		boolean checkOxygen = oxygen.getText().matches("-?\\d+(\\.\\d+)?");
		boolean checkTime = time.getText().matches("-?\\d+(\\.\\d+)?");
		if (checkPower != true || checkOxygen != true || checkTime != true) {
			JOptionPane.showMessageDialog(new JFrame(), "Must enter a positive number for the costs");
			return false;
		}
		if (Double.parseDouble(power.getText()) < 0 || Double.parseDouble(oxygen.getText()) < 0 || Double.parseDouble(time.getText()) < 0) {
			JOptionPane.showMessageDialog(new JFrame(), "Must enter a positive number for the costs");
			return false;
		}
		
		try {
			mixPower = Double.parseDouble(power.getText());
			mixOxygen = Double.parseDouble(oxygen.getText());
			mixTime = Double.parseDouble(time.getText());
            PrintWriter w = new PrintWriter("files/testcosts.txt");
            w.write(power.getText() + "\r\n");
            w.write(oxygen.getText() + "\r\n");
            w.write(time.getText() + "\r\n");
            w.write(rgo.getText() + "\r\n");
            w.write(tch.getText() + "\r\n");
            w.write(crno.getText() + "\r\n");
            w.write(chrome.getText() + "\r\n");
            w.write(crni.getText() + "\r\n");
            w.write(carbon.getText() + "\r\n");
            w.close();
        } catch (IOException e) {
            System.err.println("Problem writing to the file testcosts.txt");
        }
		return true;
	}
	
	private void reset() {
		System.out.println("Reset");
		try {
			mixPower = 0.04008;
			mixOxygen = 0.0155;
			mixTime = 51.01;
            PrintWriter w = new PrintWriter("files/testcosts.txt");
            w.write("0.04008" + "\r\n");
            w.write("0.0155" + "\r\n");
            w.write("51.01" + "\r\n");
            w.write("0.0" + "\r\n");
            w.write("0.0" + "\r\n");
            w.write("0.0" + "\r\n");
            w.write("0.0" + "\r\n");
            w.write("0.0" + "\r\n");
            w.write("0.0" + "\r\n");
            w.close();
            
    		try {
    			File file = new File("files/testcosts.txt");
    			FileReader fileReader = new FileReader(file);
    			BufferedReader bufferedReader = new BufferedReader(fileReader);
    			StringBuffer stringBuffer = new StringBuffer();
    			
    			String line;
    			line = bufferedReader.readLine();
    			stringBuffer.append(line);
    			mixPower = Double.parseDouble(line);
    			power.setText(line);
    			stringBuffer.append("\n");
    			line = bufferedReader.readLine();
    			stringBuffer.append(line);
    			mixOxygen = Double.parseDouble(line);
    			oxygen.setText(line);
    			stringBuffer.append("\n");
    			line = bufferedReader.readLine();
    			stringBuffer.append(line);
    			mixTime = Double.parseDouble(line);
    			time.setText(line);
    			stringBuffer.append("\n");
    			fileReader.close();
    			
    		} catch (IOException e) {
    			e.printStackTrace();
    		}
        } catch (IOException e) {
            System.err.println("Problem writing to the file testcosts.txt");
        }
	}
	

	public double getMixPower() {
		return mixPower;
	}

	public void setMixPower(double mixPower) {
		this.mixPower = mixPower;
	}

	public double getMixOxygen() {
		return mixOxygen;
	}

	public void setMixOxygen(double mixOxygen) {
		this.mixOxygen = mixOxygen;
	}

	public double getMixTapWgt() {
		return mixTapWgt;
	}

	public void setMixTapWgt(double mixTapWgt) {
		this.mixTapWgt = mixTapWgt;
	}

	public double getMixTime() {
		return mixTime;
	}

	public void setMixTime(double mixTime) {
		this.mixTime = mixTime;
	}

	public double getMixRgo() {
		return mixRgo;
	}

	public void setMixRgo(double mixRgo) {
		this.mixRgo = mixRgo;
	}

	public double getMixTch() {
		return mixTch;
	}

	public void setMixTch(double mixTch) {
		this.mixTch = mixTch;
	}

	public double getMixCrno() {
		return mixCrno;
	}

	public void setMixCrno(double mixCrno) {
		this.mixCrno = mixCrno;
	}

	public double getMixChrome() {
		return mixChrome;
	}

	public void setMixChrome(double mixChrome) {
		this.mixChrome = mixChrome;
	}

	public double getMixCrni() {
		return mixCrni;
	}

	public void setMixCrni(double mixCrni) {
		this.mixCrni = mixCrni;
	}

	public double getMixCarbon() {
		return mixCarbon;
	}

	public void setMixCarbon(double mixCarbon) {
		this.mixCarbon = mixCarbon;
	}
}
